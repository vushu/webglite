["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$find"]],"~:name","~$rewrite-clj.zip.findz","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$clojure.zip","^>","~$rewrite-clj.node","^?","~$ws","~$rewrite-clj.zip.whitespace","~$m","~$rewrite-clj.zip.move","^A","^A","^B","^B","~$node","^?","~$z","^>","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^7",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","~:line",32,"~:column",7,"~:end-line",32,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^O",[["~$zloc","~$p?"],["^Q","~$f","^R"]]]]],"~:doc","Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",3,"~:method-params",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"~:arglists-meta",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",11,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"~:protocol-impl",null,"^X",["^O",[null,null]],"^K",1,"^J",32,"^L",32,"^V",3,"~:fn-var",true,"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^S","Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location."],"~$find-token",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",112,"^K",7,"^L",112,"^M",17,"^N",["^O",["^P",["^O",[["^Q","^R"],["^Q","~$f","^R"]]]]],"^S","Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-token","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",17,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",112,"^L",112,"^V",3,"^[",true,"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^S","Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."],"~$in-range?",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",20,"^K",7,"^L",20,"^M",16,"^N",["^O",["^P",["^O",[[["^ ","~:keys",["~$row","~$col","~$end-row","~$end-col"]],["^ ","~$r","~:row","~$c","~:col"]]]]]]],"^8","~$rewrite-clj.zip.findz/in-range?","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",16,"^W",["^O",[["~$p__21214","~$p__21215"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",20,"^L",20,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[[["^ ","^13",["^14","^15","^16","^17"]],["^ ","~$r","^18","~$c","^19"]]]]]]],"~$find-next-depth-first",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",79,"^K",7,"^L",79,"^M",28,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way."],"^8","~$rewrite-clj.zip.findz/find-next-depth-first","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",28,"^W",["^O",[["^Q","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",79,"^L",79,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way."],"~$find-next-token",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",122,"^K",7,"^L",122,"^M",22,"^N",["^O",["^P",["^O",[["^Q","^R"],["^Q","~$f","^R"]]]]],"^S","Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-next-token","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",22,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",122,"^L",122,"^V",3,"^[",true,"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^S","Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."],"~$tag-predicate",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",11,"^K",8,"^L",11,"^M",21,"~:private",true,"^N",["^O",["^P",["^O",[["~$t","~$&",["~$additional"]]]]]],"^T",["^ ","^U",true,"^V",1,"^W",[["^O",["~$t",["^1C"]]]],"^N",["^O",[["~$t","~$&",["^1C"]]]],"^X",["^O",[null]]]],"^1B",true,"^8","~$rewrite-clj.zip.findz/tag-predicate","^U",true,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",21,"^T",["^ ","^U",true,"^V",1,"^W",[["^O",["~$t",["^1C"]]]],"^N",["^O",[["~$t","~$&",["^1C"]]]],"^X",["^O",[null]]],"^W",[["^O",["~$t",["^1C"]]]],"^Z",null,"^X",["^O",[null]],"^K",1,"^J",11,"^L",11,"^V",1,"^[",true,"^N",["^O",[["~$t","~$&",["^1C"]]]]],"~$find-tag-by-pos",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",105,"^K",7,"^L",105,"^M",22,"^N",["^O",["^P",["^O",[["^Q","~$pos","~$t"]]]]],"^S","Find node with the given tag and pos depth-first from initial zipper location."],"^8","~$rewrite-clj.zip.findz/find-tag-by-pos","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",22,"^W",["^O",[["^Q","^1F","~$t"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",105,"^L",105,"^V",3,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^1F","~$t"]]]]],"^S","Find node with the given tag and pos depth-first from initial zipper location."],"~$find-tag",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",86,"^K",7,"^L",86,"^M",15,"^N",["^O",["^P",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]]]],"^S","Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-tag","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",15,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",86,"^L",86,"^V",3,"^[",true,"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^S","Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location."],"~$find-value",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",131,"^K",7,"^L",131,"^M",17,"^N",["^O",["^P",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]]]],"^S","Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-value","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",17,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",131,"^L",131,"^V",3,"^[",true,"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^S","Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."],"~$find-next",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",70,"^K",7,"^L",70,"^M",16,"^N",["^O",["^P",["^O",[["^Q","^R"],["^Q","~$f","^R"]]]]],"^S","Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-next","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",16,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",70,"^L",70,"^V",3,"^[",true,"^N",["^O",[["^Q","^R"],["^Q","~$f","^R"]]],"^S","Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location."],"~$find-next-tag",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",94,"^K",7,"^L",94,"^M",20,"^N",["^O",["^P",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]]]],"^S","Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-next-tag","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",20,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",94,"^L",94,"^V",3,"^[",true,"^N",["^O",[["^Q","~$t"],["^Q","~$f","~$t"]]],"^S","Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location."],"~$find-last-by-pos",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",48,"^K",7,"^L",48,"^M",23,"^N",["^O",["^P",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]]]],"^S","Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^N",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-last-by-pos","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",23,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^N",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",48,"^L",48,"^V",3,"^[",true,"^N",["^O",[["^Q","^1F"],["^Q","^1F","^R"]]],"^S","Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location."],"~$find-depth-first",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",63,"^K",7,"^L",63,"^M",23,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way."],"^8","~$rewrite-clj.zip.findz/find-depth-first","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",23,"^W",["^O",[["^Q","^R"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",63,"^L",63,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way."],"~$find-next-value",["^ ","^G",null,"^H",["^ ","^I","/root/coding/clojurescript/webglite/.cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^J",143,"^K",7,"^L",143,"^M",22,"^N",["^O",["^P",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]]]],"^S","Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^X",["^O",[null,null]]]],"^8","~$rewrite-clj.zip.findz/find-next-value","^U",false,"^I",".cljs_nashorn_repl/rewrite_clj/zip/findz.cljs","^M",22,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",143,"^L",143,"^V",3,"^[",true,"^N",["^O",[["^Q","~$v"],["^Q","~$f","~$v"]]],"^S","Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:end-row","~:else","~:token","^19","~:end-col","^18"]],"~:order",["^18","^19","^1Z","^21","^1[","^20"]],"^S",null]